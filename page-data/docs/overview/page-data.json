{
    "componentChunkName": "component---src-templates-doc-template-tsx",
    "path": "/docs/overview",
    "result": {"data":{"currentPage":{"html":"<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>React DnD is unlike most of the drag and drop libraries out there, and it can be intimidating if you've never used it before. However, once you get a taste of a few concepts at the heart of its design, it starts to make sense. I suggest you read about these concepts before the rest of the docs.</p>\n<p>Some of these concepts resemble the <a href=\"http://facebook.github.io/flux/\">Flux</a> and <a href=\"https://github.com/reactjs/react-redux\">Redux</a> architectures.<br>\nThis is not a coincidence, as React DnD uses Redux internally.</p>\n<h3 id=\"items-and-types\" style=\"position:relative;\"><a href=\"#items-and-types\" aria-label=\"items and types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Items and Types</h3>\n<p>Like Flux (or Redux), React DnD uses data, and not the views, as the source of truth. When you drag something across the screen, we don't say that a component, or a DOM node is being dragged. Instead, we say that an <em>item</em> of a certain <em>type</em> is being dragged.</p>\n<p>What is an item? An <em>item</em> is a plain JavaScript object <em>describing</em> what's being dragged. For example, in a Kanban board application, when you drag a card, an item might look like <code class=\"language-text\">{ cardId: 42 }</code>. In a Chess game, when you pick up a piece, the item might look like <code class=\"language-text\">{ fromCell: 'C5', piece: 'queen' }</code>. <strong>Describing the dragged data as a plain object helps you keep the components decoupled and unaware of each other.</strong></p>\n<p>What is a type, then? A <em>type</em> is a string (or a <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symbol</a>) uniquely identifying <em>a whole class of items</em> in your application. In a Kanban board app, you might have a <code class=\"language-text\">'card'</code> type representing the draggable cards and a <code class=\"language-text\">'list'</code> type for the draggable lists of those cards. In Chess, you might only have a single <code class=\"language-text\">'piece'</code> type.</p>\n<p>Types are useful because, as your app grows, you might want to make more things draggable, but you don't necessarily want all the existing drop targets to suddenly start reacting to the new items. <strong>The types let you specify which drag sources and drop targets are compatible.</strong> You're probably going to have an enumeration of the type constants in your application, similar to how you may have an enumeration of the Redux action types.</p>\n<h3 id=\"monitors\" style=\"position:relative;\"><a href=\"#monitors\" aria-label=\"monitors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Monitors</h3>\n<p>Drag and drop is inherently stateful. Either a drag operation is in progress, or it isn't. Either there is a current type and a current item, or there isn't. This state has to live somewhere.</p>\n<p>React DnD exposes this state to your components via a few tiny wrappers over the internal state storage called the <em>monitors</em>. <strong>The monitors let you update the props of your components in response to the drag and drop state changes.</strong></p>\n<p>For each component that needs to track the drag and drop state, you can define a <em>collecting function</em> that retrieves the relevant bits of it from the monitors. React DnD then takes care of timely calling your collecting function and merging its return value into your components' props.</p>\n<p>Let's say you want to highlight the Chess cells when a piece is being dragged. A collecting function for the <code class=\"language-text\">Cell</code> component might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">monitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    highlighted<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">canDrop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hovered<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">isOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It instructs React DnD to pass the up-to-date values of <code class=\"language-text\">highlighted</code> and <code class=\"language-text\">hovered</code> to all the <code class=\"language-text\">Cell</code> instances as props.</p>\n<h3 id=\"connectors\" style=\"position:relative;\"><a href=\"#connectors\" aria-label=\"connectors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connectors</h3>\n<p>If the backend handles the DOM events, but the components use React to describe the DOM, how does the backend know which DOM nodes to listen to? Enter the <em>connectors</em>. <strong>The connectors let you assign one of the predefined roles (a drag source, a drag preview, or a drop target) to the DOM nodes</strong> in your <code class=\"language-text\">render</code> function.</p>\n<p>In fact, a connector is passed as the first argument to the <em>collecting function</em> we described above. Let's see how we can use it to specify the drop target:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">connect<span class=\"token punctuation\">,</span> monitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    highlighted<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">canDrop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    hovered<span class=\"token operator\">:</span> monitor<span class=\"token punctuation\">.</span><span class=\"token function\">isOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    connectDropTarget<span class=\"token operator\">:</span> connect<span class=\"token punctuation\">.</span><span class=\"token function\">dropTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the component's <code class=\"language-text\">render</code> method, we are then able to access both the data obtained from the monitor, and the function obtained from the connector:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> highlighted<span class=\"token punctuation\">,</span> hovered<span class=\"token punctuation\">,</span> connectDropTarget <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">connectDropTarget</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Cell'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Cell--highlighted'</span><span class=\"token operator\">:</span> highlighted<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Cell--hovered'</span><span class=\"token operator\">:</span> hovered\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">connectDropTarget</code> call tells React DnD that the root DOM node of our component is a valid drop target, and that its hover and drop events should be handled by the backend. Internally it works by attaching a <a href=\"https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\">callback ref</a> to the React element you gave it. The function returned by the connector is memoized, so it doesn't break the <code class=\"language-text\">shouldComponentUpdate</code> optimizations.</p>\n<h3 id=\"drag-sources-and-drop-targets\" style=\"position:relative;\"><a href=\"#drag-sources-and-drop-targets\" aria-label=\"drag sources and drop targets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Drag Sources and Drop Targets</h3>\n<p>So far we have covered the backends which work with the DOM, the data, as represented by the items and types, and the collecting functions that, thanks to the monitors and the connectors, let you describe what props React DnD should inject into your components.</p>\n<p>But how do we configure our components to actually have those props injected? How do we perform the side effects in response to the drag and drop events? Meet the <em>drag sources</em> and the <em>drop targets</em>, the primary abstraction units of React DnD. <strong>They really tie the types, the items, the side effects, and the collecting functions together with your components.</strong></p>\n<p>Whenever you want to make a component or some part of it draggable, you need to wrap that component into a <em>drag source</em> declaration. Every drag source is registered for a certain <em>type</em>, and has to implement a method producing an <em>item</em> from the component's props. It can also optionally specify a few other methods for handling the drag and drop events. The drag source declaration also lets you specify the <em>collecting function</em> for the given component.</p>\n<p>The <em>drop targets</em> are very similar to the drag sources. The only difference is that a single drop target may register for several item types at once, and instead of producing an item, it may handle its hover or drop.</p>\n<h3 id=\"backends\" style=\"position:relative;\"><a href=\"#backends\" aria-label=\"backends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backends</h3>\n<p>React DnD uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop\">HTML5 drag and drop API</a>. It is a reasonable default because it screenshots the dragged DOM node and uses it as a “drag preview” out of the box. It's handy that you don't have to do any drawing as the cursor moves. This API is also the only way to handle the file drop events.</p>\n<p>Unfortunately, the HTML5 drag and drop API also has some downsides. It does not work on touch screens, and it provides less customization opportunities on IE than in other browsers.</p>\n<p>This is why <strong>the HTML5 drag and drop support is implemented in a pluggable way</strong> in React DnD. You don't have to use it. You can write a different implementation, based on touch events, mouse events, or something else entirely. Such pluggable implementations are called the <em>backends</em> in React DnD.</p>\n<p>The library currently ships with the <a href=\"/react-dnd/docs/backends/html5\">HTML backend</a>, which should be sufficient for most web applications. There is also a <a href=\"/react-dnd/docs/backends/touch\">Touch backend</a> that can be used for mobile web applications.</p>\n<p>The backends perform a similar role to that of React's synthetic event system: <strong>they abstract away the browser differences and process the native DOM events.</strong> Despite the similarities, React DnD backends do not have a dependency on React or its synthetic event system. Under the hood, all the backends do is translate the DOM events into the internal Redux actions that React DnD can process.</p>\n<h3 id=\"hooks-vs-higher-order-components\" style=\"position:relative;\"><a href=\"#hooks-vs-higher-order-components\" aria-label=\"hooks vs higher order components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks vs Higher-Order Components</h3>\n<p>Now you should have an understanding of the various moving pieces of React DnD:</p>\n<ul>\n<li>Item objects and types</li>\n<li>DnD state via flux</li>\n<li>Monitors for observing DnD state</li>\n<li>Collector functions for turning monitor output into consumable props</li>\n<li>Connectors for attaching the DnD state machine to view nodes (e.g. DOM elements)</li>\n</ul>\n<p>Now let's talk about how these pieces come together in your components. You have two options: a modern hooks-based API and the classic Decorators-based API.</p>\n<h3 id=\"hooks\" style=\"position:relative;\"><a href=\"#hooks\" aria-label=\"hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks</h3>\n<p>Modern React applications have replaced the Higher-Order-Component pattern with hooks. Hooks are a feature of React, introduced in 16.8, that allow for developers to write stateful function components. They are also fantastic for managing stateful components, and also for interacting with external stateful systems (*<strong>cough</strong>* like a Drag-and-Drop engine *<strong>cough</strong>*).</p>\n<p>If you are unfamiliar with React hooks, refer to the React blog post, <a href=\"https://reactjs.org/docs/hooks-intro.html\">Introducing Hooks</a>.</p>\n<p>React-DnD provides hooks that connect your components to the DnD engine, and allow you to collect monitor state for rendering.</p>\n<p>For an overview of the hooks-based API, refer to the <a href=\"/react-dnd/docs/api/hooks-overview\">Hooks Overview</a> page.</p>\n<h3 id=\"higher-order-components-and-decorators\" style=\"position:relative;\"><a href=\"#higher-order-components-and-decorators\" aria-label=\"higher order components and decorators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher-Order Components and Decorators</h3>\n<h3 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>Now you know enough about React DnD to explore the rest of the documentation!<br>\nThe <a href=\"/react-dnd/docs/api/hooks-overview\">hooks overview</a> and <a href=\"/react-dnd/docs/api/decorators-overview\">decorators overview</a> documentation pages are great places to start. Or jump straight into the <a href=\"/react-dnd/docs/tutorial\">tutorial app</a> and build a chess game!</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{"id":"overview","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#overview","ariaLabel":"overview permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Overview"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React DnD is unlike most of the drag and drop libraries out there, and it can be intimidating if you've never used it before. However, once you get a taste of a few concepts at the heart of its design, it starts to make sense. I suggest you read about these concepts before the rest of the docs."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some of these concepts resemble the "},{"type":"element","tagName":"a","properties":{"href":"http://facebook.github.io/flux/"},"children":[{"type":"text","value":"Flux"}]},{"type":"text","value":" and "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/reactjs/react-redux"},"children":[{"type":"text","value":"Redux"}]},{"type":"text","value":" architectures."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nThis is not a coincidence, as React DnD uses Redux internally."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"items-and-types","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#items-and-types","ariaLabel":"items and types permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Items and Types"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Like Flux (or Redux), React DnD uses data, and not the views, as the source of truth. When you drag something across the screen, we don't say that a component, or a DOM node is being dragged. Instead, we say that an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"item"}]},{"type":"text","value":" of a certain "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"type"}]},{"type":"text","value":" is being dragged."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What is an item? An "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"item"}]},{"type":"text","value":" is a plain JavaScript object "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"describing"}]},{"type":"text","value":" what's being dragged. For example, in a Kanban board application, when you drag a card, an item might look like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ cardId: 42 }"}]},{"type":"text","value":". In a Chess game, when you pick up a piece, the item might look like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ fromCell: 'C5', piece: 'queen' }"}]},{"type":"text","value":". "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Describing the dragged data as a plain object helps you keep the components decoupled and unaware of each other."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What is a type, then? A "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"type"}]},{"type":"text","value":" is a string (or a "},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol"},"children":[{"type":"text","value":"symbol"}]},{"type":"text","value":") uniquely identifying "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"a whole class of items"}]},{"type":"text","value":" in your application. In a Kanban board app, you might have a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"'card'"}]},{"type":"text","value":" type representing the draggable cards and a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"'list'"}]},{"type":"text","value":" type for the draggable lists of those cards. In Chess, you might only have a single "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"'piece'"}]},{"type":"text","value":" type."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Types are useful because, as your app grows, you might want to make more things draggable, but you don't necessarily want all the existing drop targets to suddenly start reacting to the new items. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The types let you specify which drag sources and drop targets are compatible."}]},{"type":"text","value":" You're probably going to have an enumeration of the type constants in your application, similar to how you may have an enumeration of the Redux action types."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"monitors","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#monitors","ariaLabel":"monitors permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Monitors"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Drag and drop is inherently stateful. Either a drag operation is in progress, or it isn't. Either there is a current type and a current item, or there isn't. This state has to live somewhere."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React DnD exposes this state to your components via a few tiny wrappers over the internal state storage called the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"monitors"}]},{"type":"text","value":". "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The monitors let you update the props of your components in response to the drag and drop state changes."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each component that needs to track the drag and drop state, you can define a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"collecting function"}]},{"type":"text","value":" that retrieves the relevant bits of it from the monitors. React DnD then takes care of timely calling your collecting function and merging its return value into your components' props."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's say you want to highlight the Chess cells when a piece is being dragged. A collecting function for the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Cell"}]},{"type":"text","value":" component might look like this:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"jsx"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-jsx"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"function"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"collect"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"text","value":"monitor"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    highlighted"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" monitor"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"canDrop"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n    hovered"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" monitor"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"isOver"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It instructs React DnD to pass the up-to-date values of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"highlighted"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hovered"}]},{"type":"text","value":" to all the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Cell"}]},{"type":"text","value":" instances as props."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"connectors","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#connectors","ariaLabel":"connectors permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Connectors"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the backend handles the DOM events, but the components use React to describe the DOM, how does the backend know which DOM nodes to listen to? Enter the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"connectors"}]},{"type":"text","value":". "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The connectors let you assign one of the predefined roles (a drag source, a drag preview, or a drop target) to the DOM nodes"}]},{"type":"text","value":" in your "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"render"}]},{"type":"text","value":" function."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In fact, a connector is passed as the first argument to the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"collecting function"}]},{"type":"text","value":" we described above. Let's see how we can use it to specify the drop target:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"jsx"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-jsx"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"function"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"collect"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"text","value":"connect"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" monitor"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    highlighted"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" monitor"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"canDrop"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n    hovered"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" monitor"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"isOver"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n    connectDropTarget"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" connect"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"dropTarget"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the component's "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"render"}]},{"type":"text","value":" method, we are then able to access both the data obtained from the monitor, and the function obtained from the connector:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"jsx"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-jsx"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"render"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":" highlighted"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" hovered"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" connectDropTarget "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"props"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"connectDropTarget"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"div"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","attr-name"]},"children":[{"type":"text","value":"className"}]},{"type":"element","tagName":"span","properties":{"className":["token","script","language-javascript"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","script-punctuation","punctuation"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"classSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'Cell'"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","boolean"]},"children":[{"type":"text","value":"true"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'Cell--highlighted'"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" highlighted"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'Cell--hovered'"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" hovered\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","plain-text"]},"children":[{"type":"text","value":"\n      "}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"props"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"children"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","plain-text"]},"children":[{"type":"text","value":"\n    "}]},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"div"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"connectDropTarget"}]},{"type":"text","value":" call tells React DnD that the root DOM node of our component is a valid drop target, and that its hover and drop events should be handled by the backend. Internally it works by attaching a "},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/refs-and-the-dom.html#callback-refs"},"children":[{"type":"text","value":"callback ref"}]},{"type":"text","value":" to the React element you gave it. The function returned by the connector is memoized, so it doesn't break the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"shouldComponentUpdate"}]},{"type":"text","value":" optimizations."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"drag-sources-and-drop-targets","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#drag-sources-and-drop-targets","ariaLabel":"drag sources and drop targets permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Drag Sources and Drop Targets"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So far we have covered the backends which work with the DOM, the data, as represented by the items and types, and the collecting functions that, thanks to the monitors and the connectors, let you describe what props React DnD should inject into your components."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But how do we configure our components to actually have those props injected? How do we perform the side effects in response to the drag and drop events? Meet the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"drag sources"}]},{"type":"text","value":" and the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"drop targets"}]},{"type":"text","value":", the primary abstraction units of React DnD. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"They really tie the types, the items, the side effects, and the collecting functions together with your components."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whenever you want to make a component or some part of it draggable, you need to wrap that component into a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"drag source"}]},{"type":"text","value":" declaration. Every drag source is registered for a certain "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"type"}]},{"type":"text","value":", and has to implement a method producing an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"item"}]},{"type":"text","value":" from the component's props. It can also optionally specify a few other methods for handling the drag and drop events. The drag source declaration also lets you specify the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"collecting function"}]},{"type":"text","value":" for the given component."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"drop targets"}]},{"type":"text","value":" are very similar to the drag sources. The only difference is that a single drop target may register for several item types at once, and instead of producing an item, it may handle its hover or drop."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"backends","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#backends","ariaLabel":"backends permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Backends"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React DnD uses the "},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop"},"children":[{"type":"text","value":"HTML5 drag and drop API"}]},{"type":"text","value":". It is a reasonable default because it screenshots the dragged DOM node and uses it as a “drag preview” out of the box. It's handy that you don't have to do any drawing as the cursor moves. This API is also the only way to handle the file drop events."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Unfortunately, the HTML5 drag and drop API also has some downsides. It does not work on touch screens, and it provides less customization opportunities on IE than in other browsers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is why "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"the HTML5 drag and drop support is implemented in a pluggable way"}]},{"type":"text","value":" in React DnD. You don't have to use it. You can write a different implementation, based on touch events, mouse events, or something else entirely. Such pluggable implementations are called the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"backends"}]},{"type":"text","value":" in React DnD."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The library currently ships with the "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/backends/html5"},"children":[{"type":"text","value":"HTML backend"}]},{"type":"text","value":", which should be sufficient for most web applications. There is also a "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/backends/touch"},"children":[{"type":"text","value":"Touch backend"}]},{"type":"text","value":" that can be used for mobile web applications."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The backends perform a similar role to that of React's synthetic event system: "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"they abstract away the browser differences and process the native DOM events."}]},{"type":"text","value":" Despite the similarities, React DnD backends do not have a dependency on React or its synthetic event system. Under the hood, all the backends do is translate the DOM events into the internal Redux actions that React DnD can process."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"hooks-vs-higher-order-components","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#hooks-vs-higher-order-components","ariaLabel":"hooks vs higher order components permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Hooks vs Higher-Order Components"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now you should have an understanding of the various moving pieces of React DnD:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Item objects and types"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"DnD state via flux"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Monitors for observing DnD state"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Collector functions for turning monitor output into consumable props"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Connectors for attaching the DnD state machine to view nodes (e.g. DOM elements)"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now let's talk about how these pieces come together in your components. You have two options: a modern hooks-based API and the classic Decorators-based API."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"hooks","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#hooks","ariaLabel":"hooks permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Hooks"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Modern React applications have replaced the Higher-Order-Component pattern with hooks. Hooks are a feature of React, introduced in 16.8, that allow for developers to write stateful function components. They are also fantastic for managing stateful components, and also for interacting with external stateful systems (*"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"cough"}]},{"type":"text","value":"* like a Drag-and-Drop engine *"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"cough"}]},{"type":"text","value":"*)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are unfamiliar with React hooks, refer to the React blog post, "},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/hooks-intro.html"},"children":[{"type":"text","value":"Introducing Hooks"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React-DnD provides hooks that connect your components to the DnD engine, and allow you to collect monitor state for rendering."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For an overview of the hooks-based API, refer to the "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/api/hooks-overview"},"children":[{"type":"text","value":"Hooks Overview"}]},{"type":"text","value":" page."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"higher-order-components-and-decorators","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#higher-order-components-and-decorators","ariaLabel":"higher order components and decorators permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Higher-Order Components and Decorators"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"conclusion","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#conclusion","ariaLabel":"conclusion permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Conclusion"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now you know enough about React DnD to explore the rest of the documentation!"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nThe "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/api/hooks-overview"},"children":[{"type":"text","value":"hooks overview"}]},{"type":"text","value":" and "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/api/decorators-overview"},"children":[{"type":"text","value":"decorators overview"}]},{"type":"text","value":" documentation pages are great places to start. Or jump straight into the "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/tutorial"},"children":[{"type":"text","value":"tutorial app"}]},{"type":"text","value":" and build a chess game!"}]}],"data":{"quirksMode":false}},"frontmatter":{"path":"/docs/overview","title":"Overview"}},"toc":{"edges":[{"node":{"frontmatter":{"title":"FAQ","path":"/docs/faq"}}},{"node":{"frontmatter":{"title":"Overview","path":"/docs/overview"}}},{"node":{"frontmatter":{"title":"Testing","path":"/docs/testing"}}},{"node":{"frontmatter":{"title":"Troubleshooting","path":"/docs/troubleshooting"}}},{"node":{"frontmatter":{"title":"DndProvider","path":"/docs/api/dnd-provider"}}},{"node":{"frontmatter":{"title":"DragPreviewImage","path":"/docs/api/drag-preview-image"}}},{"node":{"frontmatter":{"title":"Tutorial","path":"/docs/tutorial"}}},{"node":{"frontmatter":{"title":"DragLayerMonitor","path":"/docs/api/drag-layer-monitor"}}},{"node":{"frontmatter":{"title":"DragSourceMonitor","path":"/docs/api/drag-source-monitor"}}},{"node":{"frontmatter":{"title":"DropTargetMonitor","path":"/docs/api/drop-target-monitor"}}},{"node":{"frontmatter":{"title":"DndProvider","path":"/docs/api/dnd-provider"}}},{"node":{"frontmatter":{"title":"DragPreviewImage","path":"/docs/api/drag-preview-image"}}},{"node":{"frontmatter":{"title":"Overview","path":"/docs/api/hooks-overview"}}},{"node":{"frontmatter":{"title":"useDrag","path":"/docs/api/use-drag"}}},{"node":{"frontmatter":{"title":"useDragDropManager","path":"/docs/api/use-drag-drop-manager"}}},{"node":{"frontmatter":{"title":"useDrag","path":"/docs/api/use-drag-layer"}}},{"node":{"frontmatter":{"title":"useDrop","path":"/docs/api/use-drop"}}},{"node":{"frontmatter":{"title":"Overview","path":"/docs/api/decorators-overview"}}},{"node":{"frontmatter":{"title":"DropTarget","path":"/docs/api/drop-target"}}},{"node":{"frontmatter":{"title":"DropTargetConnector","path":"/docs/api/drop-target-connector"}}},{"node":{"frontmatter":{"title":"HTML5 Backend","path":"/docs/backends/html5"}}},{"node":{"frontmatter":{"title":"Test Backend","path":"/docs/backends/test"}}},{"node":{"frontmatter":{"title":"Touch Backend","path":"/docs/backends/touch"}}},{"node":{"frontmatter":{"title":"DragSourceConnector","path":"/docs/api/drag-source-connector"}}},{"node":{"frontmatter":{"title":"DragSource","path":"/docs/api/drag-source"}}},{"node":{"frontmatter":{"title":"DragLayer","path":"/docs/api/drag-layer"}}}]}},"pageContext":{}},
    "staticQueryHashes": []}