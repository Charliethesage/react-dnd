{
    "componentChunkName": "component---src-templates-doc-template-tsx",
    "path": "/docs/api/drag-source-monitor",
    "result": {"data":{"currentPage":{"html":"<p><em>New to React DnD? <a href=\"/react-dnd/docs/overview\">Read the overview</a> before jumping into the docs.</em></p>\n<h1 id=\"dragsourcemonitor\" style=\"position:relative;\"><a href=\"#dragsourcemonitor\" aria-label=\"dragsourcemonitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DragSourceMonitor</h1>\n<p><code class=\"language-text\">DragSourceMonitor</code> is an object passed to a collecting function of a <a href=\"/react-dnd/docs/api/use-drag\">dragging source</a>. Its methods let you get information about the drag state of a specific drag source. The specific drag source bound to that monitor is called the monitor's <em>owner</em> below.</p>\n<h3 id=\"methods\" style=\"position:relative;\"><a href=\"#methods\" aria-label=\"methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h3>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">canDrag()</code></strong>: Returns <code class=\"language-text\">true</code> if no drag operation is in progress, and the owner's <code class=\"language-text\">canDrag()</code> returns <code class=\"language-text\">true</code> or is not defined.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">isDragging()</code></strong>: Returns <code class=\"language-text\">true</code> if a drag operation is in progress, and either the owner initiated the drag, or its <code class=\"language-text\">isDragging()</code> is defined and returns <code class=\"language-text\">true</code>.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getItemType()</code></strong>: Returns a string or a symbol identifying the type of the current dragged item. Returns <code class=\"language-text\">null</code> if no item is being dragged.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getItem()</code></strong>: Returns a plain object representing the currently dragged item. Every drag source must specify it by returning an object from its <code class=\"language-text\">beginDrag()</code> method. Returns <code class=\"language-text\">null</code> if no item is being dragged.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getDropResult()</code></strong>: Returns a plain object representing the last recorded drop result. The drop targets may optionally specify it by returning an object from their <code class=\"language-text\">drop()</code> methods. When a chain of <code class=\"language-text\">drop()</code> is dispatched for the nested targets, bottom up, any parent that explicitly returns its own result from <code class=\"language-text\">drop()</code> overrides the child drop result previously set by the child. Returns <code class=\"language-text\">null</code> if called outside <code class=\"language-text\">endDrag()</code>.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">didDrop()</code></strong> Returns <code class=\"language-text\">true</code> if some drop target has handled the drop event, <code class=\"language-text\">false</code> otherwise. Even if a target did not return a drop result, <code class=\"language-text\">didDrop()</code> returns <code class=\"language-text\">true</code>. Use it inside <code class=\"language-text\">endDrag()</code> to test whether any drop target has handled the drop. Returns <code class=\"language-text\">false</code> if called outside <code class=\"language-text\">endDrag()</code>.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getInitialClientOffset()</code></strong>: Returns the <code class=\"language-text\">{ x, y }</code> client offset of the pointer at the time when the current drag operation has started. Returns <code class=\"language-text\">null</code> if no item is being dragged.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getInitialSourceClientOffset()</code></strong>: Returns the <code class=\"language-text\">{ x, y }</code> client offset of the drag source component's root DOM node at the time when the current drag operation has started. Returns <code class=\"language-text\">null</code> if no item is being dragged.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getClientOffset()</code></strong>: Returns the last recorded <code class=\"language-text\">{ x, y }</code> client offset of the pointer while a drag operation is in progress. Returns <code class=\"language-text\">null</code> if no item is being dragged.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getDifferenceFromInitialOffset()</code></strong>: Returns the <code class=\"language-text\">{ x, y }</code> difference between the last recorded client offset of the pointer and the client offset when the current drag operation has started. Returns <code class=\"language-text\">null</code> if no item is being dragged.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">getSourceClientOffset()</code></strong>: Returns the projected <code class=\"language-text\">{ x, y }</code> client offset of the drag source component's root DOM node, based on its position at the time when the current drag operation has started, and the movement difference. Returns <code class=\"language-text\">null</code> if no item is being dragged.</p>\n</li>\n</ul>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"New to React DnD? "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/overview"},"children":[{"type":"text","value":"Read the overview"}]},{"type":"text","value":" before jumping into the docs."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"dragsourcemonitor","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#dragsourcemonitor","ariaLabel":"dragsourcemonitor permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"DragSourceMonitor"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DragSourceMonitor"}]},{"type":"text","value":" is an object passed to a collecting function of a "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/api/use-drag"},"children":[{"type":"text","value":"dragging source"}]},{"type":"text","value":". Its methods let you get information about the drag state of a specific drag source. The specific drag source bound to that monitor is called the monitor's "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"owner"}]},{"type":"text","value":" below."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"methods","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#methods","ariaLabel":"methods permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Methods"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"canDrag()"}]}]},{"type":"text","value":": Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" if no drag operation is in progress, and the owner's "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"canDrag()"}]},{"type":"text","value":" returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" or is not defined."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"isDragging()"}]}]},{"type":"text","value":": Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" if a drag operation is in progress, and either the owner initiated the drag, or its "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"isDragging()"}]},{"type":"text","value":" is defined and returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getItemType()"}]}]},{"type":"text","value":": Returns a string or a symbol identifying the type of the current dragged item. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if no item is being dragged."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getItem()"}]}]},{"type":"text","value":": Returns a plain object representing the currently dragged item. Every drag source must specify it by returning an object from its "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"beginDrag()"}]},{"type":"text","value":" method. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if no item is being dragged."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getDropResult()"}]}]},{"type":"text","value":": Returns a plain object representing the last recorded drop result. The drop targets may optionally specify it by returning an object from their "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"drop()"}]},{"type":"text","value":" methods. When a chain of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"drop()"}]},{"type":"text","value":" is dispatched for the nested targets, bottom up, any parent that explicitly returns its own result from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"drop()"}]},{"type":"text","value":" overrides the child drop result previously set by the child. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if called outside "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"endDrag()"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"didDrop()"}]}]},{"type":"text","value":" Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" if some drop target has handled the drop event, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"false"}]},{"type":"text","value":" otherwise. Even if a target did not return a drop result, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"didDrop()"}]},{"type":"text","value":" returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":". Use it inside "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"endDrag()"}]},{"type":"text","value":" to test whether any drop target has handled the drop. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"false"}]},{"type":"text","value":" if called outside "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"endDrag()"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getInitialClientOffset()"}]}]},{"type":"text","value":": Returns the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ x, y }"}]},{"type":"text","value":" client offset of the pointer at the time when the current drag operation has started. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if no item is being dragged."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getInitialSourceClientOffset()"}]}]},{"type":"text","value":": Returns the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ x, y }"}]},{"type":"text","value":" client offset of the drag source component's root DOM node at the time when the current drag operation has started. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if no item is being dragged."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getClientOffset()"}]}]},{"type":"text","value":": Returns the last recorded "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ x, y }"}]},{"type":"text","value":" client offset of the pointer while a drag operation is in progress. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if no item is being dragged."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getDifferenceFromInitialOffset()"}]}]},{"type":"text","value":": Returns the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ x, y }"}]},{"type":"text","value":" difference between the last recorded client offset of the pointer and the client offset when the current drag operation has started. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if no item is being dragged."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getSourceClientOffset()"}]}]},{"type":"text","value":": Returns the projected "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ x, y }"}]},{"type":"text","value":" client offset of the drag source component's root DOM node, based on its position at the time when the current drag operation has started, and the movement difference. Returns "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" if no item is being dragged."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"path":"/docs/api/drag-source-monitor","title":"DragSourceMonitor"}},"toc":{"edges":[{"node":{"frontmatter":{"title":"FAQ","path":"/docs/faq"}}},{"node":{"frontmatter":{"title":"Overview","path":"/docs/overview"}}},{"node":{"frontmatter":{"title":"Testing","path":"/docs/testing"}}},{"node":{"frontmatter":{"title":"Troubleshooting","path":"/docs/troubleshooting"}}},{"node":{"frontmatter":{"title":"DndProvider","path":"/docs/api/dnd-provider"}}},{"node":{"frontmatter":{"title":"DragPreviewImage","path":"/docs/api/drag-preview-image"}}},{"node":{"frontmatter":{"title":"Tutorial","path":"/docs/tutorial"}}},{"node":{"frontmatter":{"title":"DragLayerMonitor","path":"/docs/api/drag-layer-monitor"}}},{"node":{"frontmatter":{"title":"DropTargetMonitor","path":"/docs/api/drop-target-monitor"}}},{"node":{"frontmatter":{"title":"DragSourceMonitor","path":"/docs/api/drag-source-monitor"}}},{"node":{"frontmatter":{"title":"DndProvider","path":"/docs/api/dnd-provider"}}},{"node":{"frontmatter":{"title":"DragPreviewImage","path":"/docs/api/drag-preview-image"}}},{"node":{"frontmatter":{"title":"Overview","path":"/docs/api/hooks-overview"}}},{"node":{"frontmatter":{"title":"useDrag","path":"/docs/api/use-drag"}}},{"node":{"frontmatter":{"title":"useDragDropManager","path":"/docs/api/use-drag-drop-manager"}}},{"node":{"frontmatter":{"title":"useDrag","path":"/docs/api/use-drag-layer"}}},{"node":{"frontmatter":{"title":"useDrop","path":"/docs/api/use-drop"}}},{"node":{"frontmatter":{"title":"HTML5 Backend","path":"/docs/backends/html5"}}},{"node":{"frontmatter":{"title":"Test Backend","path":"/docs/backends/test"}}},{"node":{"frontmatter":{"title":"Touch Backend","path":"/docs/backends/touch"}}}]}},"pageContext":{}},
    "staticQueryHashes": []}